# Environment
vagrant.exe up
vagrant.exe ssh master
sudo su -
apt-get update ; apt-get install git -y


# Getting object SHA
echo "Apple Pie" | git hash-object --stdin -w
git cat-file 23991897e13e47ed0adb91a0082c31c82fe0cbe5 -p => To get result of above object


# Hard reset to a commit
git reset --hard f414f31
git reset --soft HEAD@{1}
git commit -m "Reverting to the state of the project at f414f31"


# Run jenkins
wget http://mirrors.jenkins.io/war-stable/latest/jenkins.war
apt-get install default-jdk
apt-get install maven
java -jar jenkins.war --httpPort=9090 &

mvn clean package -f atmosphere/spring-boot-samples/spring-boot-sample-atmosphere/pom.xml


# Worker config
passwd
vi /etc/ssh/sshd_config
Permitroologin yes
Passwordauth yes
service sshd restart

passwd: root

https://github.com/amitvashist7/devops-sg-25092019


# Docker Install
apt-get install apt-transport-https ca-certificates curl gnupg-agent software-properties-common -y
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
apt-get update
apt-get install docker-ce docker-ce-cli containerd.io -y


# Docker Basic Commands
docker ps -a
docker images
docker stop container_id
docker run busybox echo "Welcome here!"

docker pull image
docker search centos
docker attach container_id => To enter into a running container
docker start container_id => To start a stopeed container

docker run -itd image => To run a container interactively with a terminal in background
Hit ctrl + p(pause) + q(quit) to exit a container without stopping it

docker rm $(docker ps -aq) => To remove all containers
docker inspect container_id => To inspect the details of a container


# Docker Image
docker commit -p -m"First Apache Image" 4864ef814f7f my-apache-img:v1 => To commit a running container and convert it to an image

docker build -t my-image-file:v1 /path/to/dockerfile => Build an image using Dockerfile
docker run -d my-image-file:v1 => Run a docker image
docker run -d -p 8080:80 my-image-file:v1

docker run -d -P --name test01 --network mybr0 my-image-file:v3 => Run docker image with a port and name on a network
docker exec -it container_id bash


# Docker Network
docker network create -d bridge --subnet=172.28.0.0/16 --ip-range=172.28.5.0/24 --gateway=172.28.5.254 mybr0 => To create a new docker network


# Docker Volumes
docker volume create myvol => To create a new volume

docker run -it --name voltest --mount source=myvol,target=/myvoldir ubuntu:16.04 => To mount a volume. This would create a shared folder myvol(which we created using last command) and any new container would be able to get same contents as in myvol if we start the container using --mount source,target. 

docker run --name datacount -itd -v /var/log -v /root/devops-sg-25092019/docker/apache:/var/www/html ubuntu:16.04 /bin/bash


# Ansible Inventory
Inventory: Here web and db are groups
172.31.0.11
172.31.0.12

[web]
172.31.0.11
172.31.0.14
172.31.0.15

[db]
172.31.0.12
172.31.0.16

[ansible]
172.31.0.10

[prd]
172.31.0.11
172.31.0.12

[uat]
172.31.0.[11:14]

[DC:children] => Group of Groups
web
db

[DC:vars] => Declare use and password for this group
ansible_ssh_user=root
ansible_ssh_pass=root


# Ansible Commands
ansible-doc -l => Lists all modules under ansible

ansible all -i inventory -m ping -u root -k => To ping all hosts in inventory using ping module and as root by specifying password
ansible all -i inventory -m command -a 'uptime' -u root -k => To execute a speicific command on inventory machines
ansible all -i inventory -m shell -a 'cat /etc/*-release' -u root -k =>  To execute a speicific shell command on inventory machines

ansible 'db:web' -i inventory -m command -a 'uptime' -u root -k => Performs an action on both groups db and web and not on all inventories
ansible 'prd:&web' -i inventory -m command -a 'uptime' -u root -k => Performs an action on servers common between prd and web
ansible 'uat:&web:!prd' -i inventory -m command -a 'uptime' -u root -k => Performs an action on servers common between prd and web minus the ones in prd group

ansible 'uat' -i inventory -m command -a 'uptime' => If user and pass updated in Inventory


# Ansible Playbook
ansible-playbook -i inventory webserver.yaml => To run a playbook
